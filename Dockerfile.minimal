# 最简版Dockerfile - 仅使用标准库构建

FROM golang:1.21-alpine AS builder

# 安装必要的工具
RUN apk add --no-cache git ca-certificates tzdata

# 设置工作目录
WORKDIR /app

# 创建最简化的main.go
RUN cat > main.go << 'EOF'
package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"
)

type SystemInfo struct {
	Name        string    `json:"name"`
	Version     string    `json:"version"`
	Status      string    `json:"status"`
	Timestamp   time.Time `json:"timestamp"`
	Description string    `json:"description"`
}

type HealthCheck struct {
	Status    string    `json:"status"`
	Timestamp time.Time `json:"timestamp"`
	Services  map[string]string `json:"services"`
}

func main() {
	// 系统信息接口
	http.HandleFunc("/api/v1/system/info", func(w http.ResponseWriter, r *http.Request) {
		info := SystemInfo{
			Name:        "SecureFingerprint",
			Version:     "v1.0.0",
			Status:      "running",
			Timestamp:   time.Now(),
			Description: "智能访问控制系统 - 基于用户指纹的行为分析和风险控制",
		}
		
		w.Header().Set("Content-Type", "application/json")
		w.Header().Set("Access-Control-Allow-Origin", "*")
		json.NewEncoder(w).Encode(map[string]interface{}{
			"success": true,
			"data":    info,
		})
	})

	// 健康检查接口
	http.HandleFunc("/api/v1/system/health", func(w http.ResponseWriter, r *http.Request) {
		health := HealthCheck{
			Status:    "healthy",
			Timestamp: time.Now(),
			Services: map[string]string{
				"api": "running",
				"web": "running",
			},
		}
		
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]interface{}{
			"success": true,
			"data":    health,
		})
	})

	// 根路径
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if r.URL.Path != "/" {
			http.NotFound(w, r)
			return
		}
		
		html := `<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SecureFingerprint - 智能访问控制系统</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 40px; background: #f5f7fa; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { text-align: center; margin-bottom: 30px; }
        .logo { font-size: 48px; margin-bottom: 10px; }
        h1 { color: #333; margin-bottom: 10px; }
        .subtitle { color: #666; margin-bottom: 30px; }
        .features { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 30px 0; }
        .feature { padding: 20px; background: #f8f9fa; border-radius: 8px; border-left: 4px solid #409eff; }
        .api-section { background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .endpoint { background: white; padding: 10px; margin: 8px 0; border-radius: 4px; font-family: monospace; }
        .status { display: inline-block; padding: 8px 16px; background: #67c23a; color: white; border-radius: 20px; margin: 20px 0; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">🛡️</div>
            <h1>SecureFingerprint</h1>
            <p class="subtitle">智能访问控制系统</p>
            <div class="status">✅ 系统运行正常</div>
        </div>
        
        <div class="features">
            <div class="feature">
                <h3>🔍 用户指纹识别</h3>
                <p>基于多维度信息生成稳定的用户标识</p>
            </div>
            <div class="feature">
                <h3>📊 行为分析</h3>
                <p>实时分析用户访问模式和风险等级</p>
            </div>
            <div class="feature">
                <h3>🔒 访问控制</h3>
                <p>多层防护机制，智能拦截恶意访问</p>
            </div>
            <div class="feature">
                <h3>📈 实时监控</h3>
                <p>可视化管理界面，全面掌控系统状态</p>
            </div>
        </div>
        
        <div class="api-section">
            <h3>🔌 API 接口</h3>
            <div class="endpoint">GET /api/v1/system/info - 系统信息</div>
            <div class="endpoint">GET /api/v1/system/health - 健康检查</div>
        </div>
        
        <script>
            fetch('/api/v1/system/health')
                .then(r => r.json())
                .then(data => console.log('系统状态:', data))
                .catch(e => console.error('API错误:', e));
        </script>
    </div>
</body>
</html>`
		
		w.Header().Set("Content-Type", "text/html; charset=utf-8")
		fmt.Fprint(w, html)
	})

	log.Println("🛡️ SecureFingerprint 启动完成")
	log.Println("🌐 访问地址: http://localhost:8080")
	log.Println("📊 系统信息: http://localhost:8080/api/v1/system/info")
	log.Println("💚 健康检查: http://localhost:8080/api/v1/system/health")
	
	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatal("服务器启动失败:", err)
	}
}
EOF

# 初始化Go模块
RUN go mod init securefingerprint

# 构建应用
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -ldflags '-s -w' -o securefingerprint main.go

# 最终运行阶段
FROM alpine:latest

# 安装运行时依赖
RUN apk --no-cache add ca-certificates tzdata

# 设置时区
ENV TZ=Asia/Shanghai

# 创建非root用户
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# 设置工作目录
WORKDIR /app

# 从构建阶段复制二进制文件
COPY --from=builder /app/securefingerprint .

# 创建必要目录
RUN mkdir -p logs data && \
    chown -R appuser:appgroup /app

# 切换到非root用户
USER appuser

# 暴露端口
EXPOSE 8080

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8080/api/v1/system/health || exit 1

# 设置标签
LABEL maintainer="ZBaimo" \
      version="1.0.0" \
      description="SecureFingerprint - 智能访问控制系统" \
      org.opencontainers.image.title="SecureFingerprint" \
      org.opencontainers.image.description="基于用户指纹的智能访问控制系统" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.vendor="ZBaimo" \
      org.opencontainers.image.licenses="MIT"

# 启动应用
CMD ["./securefingerprint"]
