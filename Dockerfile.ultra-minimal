# 超简版Dockerfile - 完全无依赖构建

FROM golang:1.21-alpine AS builder

# 安装必要的工具
RUN apk add --no-cache ca-certificates tzdata

# 设置工作目录
WORKDIR /app

# 创建最简化的main.go（内嵌所有代码）
RUN cat > main.go << 'EOF'
package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"
)

func main() {
	// 系统信息接口
	http.HandleFunc("/api/v1/system/info", func(w http.ResponseWriter, r *http.Request) {
		info := map[string]interface{}{
			"name":        "SecureFingerprint",
			"version":     "v1.0.0",
			"status":      "running",
			"timestamp":   time.Now(),
			"description": "智能访问控制系统",
		}
		
		w.Header().Set("Content-Type", "application/json")
		w.Header().Set("Access-Control-Allow-Origin", "*")
		json.NewEncoder(w).Encode(map[string]interface{}{
			"success": true,
			"data":    info,
		})
	})

	// 健康检查接口
	http.HandleFunc("/api/v1/system/health", func(w http.ResponseWriter, r *http.Request) {
		health := map[string]interface{}{
			"status":    "healthy",
			"timestamp": time.Now(),
			"services": map[string]string{
				"api": "running",
				"web": "running",
			},
		}
		
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]interface{}{
			"success": true,
			"data":    health,
		})
	})

	// 根路径 - 提供简洁的Web界面
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		html := `<!DOCTYPE html>
<html><head><meta charset="UTF-8"><title>SecureFingerprint</title>
<style>body{font-family:Arial,sans-serif;margin:0;padding:40px;background:#f5f7fa}
.container{max-width:800px;margin:0 auto;background:white;padding:40px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1)}
.header{text-align:center;margin-bottom:30px}.logo{font-size:48px;margin-bottom:10px}
h1{color:#333;margin-bottom:10px}.subtitle{color:#666;margin-bottom:30px}
.status{display:inline-block;padding:8px 16px;background:#67c23a;color:white;border-radius:20px;margin:20px 0}
.api{background:#f8f9fa;padding:20px;border-radius:8px;margin:20px 0}
.endpoint{background:white;padding:10px;margin:8px 0;border-radius:4px;font-family:monospace}
</style></head><body>
<div class="container">
<div class="header">
<div class="logo">🛡️</div>
<h1>SecureFingerprint</h1>
<p class="subtitle">智能访问控制系统</p>
<div class="status">✅ 系统运行正常</div>
</div>
<div class="api">
<h3>🔌 API 接口</h3>
<div class="endpoint">GET /api/v1/system/info - 系统信息</div>
<div class="endpoint">GET /api/v1/system/health - 健康检查</div>
</div>
</div>
<script>fetch('/api/v1/system/health').then(r=>r.json()).then(d=>console.log('系统状态:',d))</script>
</body></html>`
		
		w.Header().Set("Content-Type", "text/html; charset=utf-8")
		fmt.Fprint(w, html)
	})

	log.Println("🛡️ SecureFingerprint v1.0.0 启动完成")
	log.Println("🌐 访问地址: http://localhost:8080")
	log.Println("📊 API接口: http://localhost:8080/api/v1/system/info")
	
	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatal("启动失败:", err)
	}
}
EOF

# 直接构建，无需go.mod
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -ldflags '-s -w' -o securefingerprint main.go

# 最终运行阶段
FROM scratch

# 复制CA证书
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# 复制时区数据
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# 设置时区
ENV TZ=Asia/Shanghai

# 复制二进制文件
COPY --from=builder /app/securefingerprint /securefingerprint

# 暴露端口
EXPOSE 8080

# 设置标签
LABEL maintainer="ZBaimo" \
      version="1.0.0" \
      description="SecureFingerprint - 智能访问控制系统" \
      org.opencontainers.image.title="SecureFingerprint" \
      org.opencontainers.image.description="基于用户指纹的智能访问控制系统" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.vendor="ZBaimo" \
      org.opencontainers.image.licenses="MIT"

# 启动应用
CMD ["/securefingerprint"]
